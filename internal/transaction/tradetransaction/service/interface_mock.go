// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/tradetransaction/service/interface.go

// package tradetransactionsvc is a generated GoMock package.
package tradetransactionsvc

import (
	reflect "reflect"

	tradetransaction "github.com/Ruscigno/ticker-signals/internal/transaction/tradetransaction"
	gomock "github.com/golang/mock/gomock"
)

// MockTradeTransactionService is a mock of TradeTransactionService interface.
type MockTradeTransactionService struct {
	ctrl     *gomock.Controller
	recorder *MockTradeTransactionServiceMockRecorder
}

// MockTradeTransactionServiceMockRecorder is the mock recorder for MockTradeTransactionService.
type MockTradeTransactionServiceMockRecorder struct {
	mock *MockTradeTransactionService
}

// NewMockTradeTransactionService creates a new mock instance.
func NewMockTradeTransactionService(ctrl *gomock.Controller) *MockTradeTransactionService {
	mock := &MockTradeTransactionService{ctrl: ctrl}
	mock.recorder = &MockTradeTransactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeTransactionService) EXPECT() *MockTradeTransactionServiceMockRecorder {
	return m.recorder
}

// GetByIDRequest mocks base method.
func (m *MockTradeTransactionService) GetByIDRequest(accountID, orderID, creationOrder int64) (*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDRequest", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDRequest indicates an expected call of GetByIDRequest.
func (mr *MockTradeTransactionServiceMockRecorder) GetByIDRequest(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDRequest", reflect.TypeOf((*MockTradeTransactionService)(nil).GetByIDRequest), accountID, orderID, creationOrder)
}

// GetByIDResult mocks base method.
func (m *MockTradeTransactionService) GetByIDResult(accountID, orderID, creationOrder int64) (*tradetransaction.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDResult", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDResult indicates an expected call of GetByIDResult.
func (mr *MockTradeTransactionServiceMockRecorder) GetByIDResult(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDResult", reflect.TypeOf((*MockTradeTransactionService)(nil).GetByIDResult), accountID, orderID, creationOrder)
}

// GetByIDTransaction mocks base method.
func (m *MockTradeTransactionService) GetByIDTransaction(accountID, orderID, creationOrder int64) (*tradetransaction.TradeTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDTransaction", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDTransaction indicates an expected call of GetByIDTransaction.
func (mr *MockTradeTransactionServiceMockRecorder) GetByIDTransaction(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDTransaction", reflect.TypeOf((*MockTradeTransactionService)(nil).GetByIDTransaction), accountID, orderID, creationOrder)
}

// Insert mocks base method.
func (m *MockTradeTransactionService) Insert(tt *tradetransaction.TradeTransaction, tr *tradetransaction.TradeRequest, rr *tradetransaction.TradeResult, timeGMT int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", tt, tr, rr, timeGMT)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockTradeTransactionServiceMockRecorder) Insert(tt, tr, rr, timeGMT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockTradeTransactionService)(nil).Insert), tt, tr, rr, timeGMT)
}
