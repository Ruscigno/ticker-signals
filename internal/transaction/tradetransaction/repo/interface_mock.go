// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/tradetransaction/repo/interface.go

// package tradetransactionrepo is a generated GoMock package.
package tradetransactionrepo

import (
	reflect "reflect"

	tradetransaction "github.com/Ruscigno/ticker-signals/internal/transaction/tradetransaction"
	gomock "github.com/golang/mock/gomock"
)

// MockTradeTransactionRepository is a mock of TradeTransactionRepository interface.
type MockTradeTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTradeTransactionRepositoryMockRecorder
}

// MockTradeTransactionRepositoryMockRecorder is the mock recorder for MockTradeTransactionRepository.
type MockTradeTransactionRepositoryMockRecorder struct {
	mock *MockTradeTransactionRepository
}

// NewMockTradeTransactionRepository creates a new mock instance.
func NewMockTradeTransactionRepository(ctrl *gomock.Controller) *MockTradeTransactionRepository {
	mock := &MockTradeTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockTradeTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTradeTransactionRepository) EXPECT() *MockTradeTransactionRepositoryMockRecorder {
	return m.recorder
}

// GetByIDRequest mocks base method.
func (m *MockTradeTransactionRepository) GetByIDRequest(accountID, orderID, creationOrder int64) (*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDRequest", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDRequest indicates an expected call of GetByIDRequest.
func (mr *MockTradeTransactionRepositoryMockRecorder) GetByIDRequest(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDRequest", reflect.TypeOf((*MockTradeTransactionRepository)(nil).GetByIDRequest), accountID, orderID, creationOrder)
}

// GetByIDResult mocks base method.
func (m *MockTradeTransactionRepository) GetByIDResult(accountID, orderID, creationOrder int64) (*tradetransaction.TradeResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDResult", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDResult indicates an expected call of GetByIDResult.
func (mr *MockTradeTransactionRepositoryMockRecorder) GetByIDResult(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDResult", reflect.TypeOf((*MockTradeTransactionRepository)(nil).GetByIDResult), accountID, orderID, creationOrder)
}

// GetByIDTransaction mocks base method.
func (m *MockTradeTransactionRepository) GetByIDTransaction(accountID, orderID, creationOrder int64) (*tradetransaction.TradeTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDTransaction", accountID, orderID, creationOrder)
	ret0, _ := ret[0].(*tradetransaction.TradeTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDTransaction indicates an expected call of GetByIDTransaction.
func (mr *MockTradeTransactionRepositoryMockRecorder) GetByIDTransaction(accountID, orderID, creationOrder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDTransaction", reflect.TypeOf((*MockTradeTransactionRepository)(nil).GetByIDTransaction), accountID, orderID, creationOrder)
}

// InsertRequest mocks base method.
func (m *MockTradeTransactionRepository) InsertRequest(tt *tradetransaction.TradeRequest, timeGMT int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRequest", tt, timeGMT)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertRequest indicates an expected call of InsertRequest.
func (mr *MockTradeTransactionRepositoryMockRecorder) InsertRequest(tt, timeGMT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRequest", reflect.TypeOf((*MockTradeTransactionRepository)(nil).InsertRequest), tt, timeGMT)
}

// InsertResult mocks base method.
func (m *MockTradeTransactionRepository) InsertResult(tt *tradetransaction.TradeResult, timeGMT int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResult", tt, timeGMT)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertResult indicates an expected call of InsertResult.
func (mr *MockTradeTransactionRepositoryMockRecorder) InsertResult(tt, timeGMT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResult", reflect.TypeOf((*MockTradeTransactionRepository)(nil).InsertResult), tt, timeGMT)
}

// InsertTransaction mocks base method.
func (m *MockTradeTransactionRepository) InsertTransaction(tt *tradetransaction.TradeTransaction, timeGMT int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", tt, timeGMT)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTransaction indicates an expected call of InsertTransaction.
func (mr *MockTradeTransactionRepositoryMockRecorder) InsertTransaction(tt, timeGMT interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTradeTransactionRepository)(nil).InsertTransaction), tt, timeGMT)
}
