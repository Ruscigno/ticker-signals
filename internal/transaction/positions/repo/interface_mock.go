// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/positions/repo/interface.go

// package positionsrepo is a generated GoMock package.
package positionsrepo

import (
	reflect "reflect"
	time "time"

	position "github.com/Ruscigno/ticker-signals/internal/transaction/positions"
	gomock "github.com/golang/mock/gomock"
)

// MockPositionsRepository is a mock of PositionsRepository interface.
type MockPositionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPositionsRepositoryMockRecorder
}

// MockPositionsRepositoryMockRecorder is the mock recorder for MockPositionsRepository.
type MockPositionsRepositoryMockRecorder struct {
	mock *MockPositionsRepository
}

// NewMockPositionsRepository creates a new mock instance.
func NewMockPositionsRepository(ctrl *gomock.Controller) *MockPositionsRepository {
	mock := &MockPositionsRepository{ctrl: ctrl}
	mock.recorder = &MockPositionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPositionsRepository) EXPECT() *MockPositionsRepositoryMockRecorder {
	return m.recorder
}

// CloseAll mocks base method.
func (m *MockPositionsRepository) CloseAll(accountID int64, closed time.Time, commission, swap, profit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAll", accountID, closed, commission, swap, profit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll.
func (mr *MockPositionsRepositoryMockRecorder) CloseAll(accountID, closed, commission, swap, profit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockPositionsRepository)(nil).CloseAll), accountID, closed, commission, swap, profit)
}

// CloseIfNotIn mocks base method.
func (m *MockPositionsRepository) CloseIfNotIn(accountID int64, tickets []int64, closed, maxDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIfNotIn", accountID, tickets, closed, maxDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIfNotIn indicates an expected call of CloseIfNotIn.
func (mr *MockPositionsRepositoryMockRecorder) CloseIfNotIn(accountID, tickets, closed, maxDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIfNotIn", reflect.TypeOf((*MockPositionsRepository)(nil).CloseIfNotIn), accountID, tickets, closed, maxDate)
}

// CloseOne mocks base method.
func (m *MockPositionsRepository) CloseOne(accountID, ticket int64, closed time.Time, commission, swap, profit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseOne", accountID, ticket, closed, commission, swap, profit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseOne indicates an expected call of CloseOne.
func (mr *MockPositionsRepositoryMockRecorder) CloseOne(accountID, ticket, closed, commission, swap, profit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseOne", reflect.TypeOf((*MockPositionsRepository)(nil).CloseOne), accountID, ticket, closed, commission, swap, profit)
}

// ConfirmByExternalID mocks base method.
func (m *MockPositionsRepository) ConfirmByExternalID(destinationAccountID, externalID int64, beatTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmByExternalID", destinationAccountID, externalID, beatTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmByExternalID indicates an expected call of ConfirmByExternalID.
func (mr *MockPositionsRepositoryMockRecorder) ConfirmByExternalID(destinationAccountID, externalID, beatTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmByExternalID", reflect.TypeOf((*MockPositionsRepository)(nil).ConfirmByExternalID), destinationAccountID, externalID, beatTime)
}

// GetActivePositions mocks base method.
func (m *MockPositionsRepository) GetActivePositions(accountID int64) ([]*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePositions", accountID)
	ret0, _ := ret[0].([]*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePositions indicates an expected call of GetActivePositions.
func (mr *MockPositionsRepositoryMockRecorder) GetActivePositions(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePositions", reflect.TypeOf((*MockPositionsRepository)(nil).GetActivePositions), accountID)
}

// GetByID mocks base method.
func (m *MockPositionsRepository) GetByID(accountID, ticket int64) (*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", accountID, ticket)
	ret0, _ := ret[0].(*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPositionsRepositoryMockRecorder) GetByID(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPositionsRepository)(nil).GetByID), accountID, ticket)
}

// GetTickerBeats mocks base method.
func (m *MockPositionsRepository) GetTickerBeats(sourceAccountID, destinationAccountID int64, from time.Time) ([]*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerBeats", sourceAccountID, destinationAccountID, from)
	ret0, _ := ret[0].([]*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickerBeats indicates an expected call of GetTickerBeats.
func (mr *MockPositionsRepositoryMockRecorder) GetTickerBeats(sourceAccountID, destinationAccountID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerBeats", reflect.TypeOf((*MockPositionsRepository)(nil).GetTickerBeats), sourceAccountID, destinationAccountID, from)
}

// Insert mocks base method.
func (m *MockPositionsRepository) Insert(ac *position.Position) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ac)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockPositionsRepositoryMockRecorder) Insert(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPositionsRepository)(nil).Insert), ac)
}

// Update mocks base method.
func (m *MockPositionsRepository) Update(ac *position.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPositionsRepositoryMockRecorder) Update(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPositionsRepository)(nil).Update), ac)
}
