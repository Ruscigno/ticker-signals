// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/positions/service/interface.go

// package positionssvc is a generated GoMock package.
package positionssvc

import (
	reflect "reflect"
	time "time"

	position "github.com/Ruscigno/ticker-signals/internal/transaction/positions"
	gomock "github.com/golang/mock/gomock"
)

// MockPositionsService is a mock of PositionsService interface.
type MockPositionsService struct {
	ctrl     *gomock.Controller
	recorder *MockPositionsServiceMockRecorder
}

// MockPositionsServiceMockRecorder is the mock recorder for MockPositionsService.
type MockPositionsServiceMockRecorder struct {
	mock *MockPositionsService
}

// NewMockPositionsService creates a new mock instance.
func NewMockPositionsService(ctrl *gomock.Controller) *MockPositionsService {
	mock := &MockPositionsService{ctrl: ctrl}
	mock.recorder = &MockPositionsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPositionsService) EXPECT() *MockPositionsServiceMockRecorder {
	return m.recorder
}

// CloseAll mocks base method.
func (m *MockPositionsService) CloseAll(accountID int64, closed time.Time, commission, swap, profit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAll", accountID, closed, commission, swap, profit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAll indicates an expected call of CloseAll.
func (mr *MockPositionsServiceMockRecorder) CloseAll(accountID, closed, commission, swap, profit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAll", reflect.TypeOf((*MockPositionsService)(nil).CloseAll), accountID, closed, commission, swap, profit)
}

// CloseIfNotIn mocks base method.
func (m *MockPositionsService) CloseIfNotIn(accountID int64, tickets []int64, closed, maxDate time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIfNotIn", accountID, tickets, closed, maxDate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIfNotIn indicates an expected call of CloseIfNotIn.
func (mr *MockPositionsServiceMockRecorder) CloseIfNotIn(accountID, tickets, closed, maxDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIfNotIn", reflect.TypeOf((*MockPositionsService)(nil).CloseIfNotIn), accountID, tickets, closed, maxDate)
}

// CloseOne mocks base method.
func (m *MockPositionsService) CloseOne(accountID, ticket int64, closed time.Time, commission, swap, profit float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseOne", accountID, ticket, closed, commission, swap, profit)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseOne indicates an expected call of CloseOne.
func (mr *MockPositionsServiceMockRecorder) CloseOne(accountID, ticket, closed, commission, swap, profit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseOne", reflect.TypeOf((*MockPositionsService)(nil).CloseOne), accountID, ticket, closed, commission, swap, profit)
}

// ConfirmByExternalID mocks base method.
func (m *MockPositionsService) ConfirmByExternalID(destinationAccountID, externalID int64, beatTime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmByExternalID", destinationAccountID, externalID, beatTime)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmByExternalID indicates an expected call of ConfirmByExternalID.
func (mr *MockPositionsServiceMockRecorder) ConfirmByExternalID(destinationAccountID, externalID, beatTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmByExternalID", reflect.TypeOf((*MockPositionsService)(nil).ConfirmByExternalID), destinationAccountID, externalID, beatTime)
}

// GetActivePositions mocks base method.
func (m *MockPositionsService) GetActivePositions(accountID int64) ([]*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivePositions", accountID)
	ret0, _ := ret[0].([]*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivePositions indicates an expected call of GetActivePositions.
func (mr *MockPositionsServiceMockRecorder) GetActivePositions(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivePositions", reflect.TypeOf((*MockPositionsService)(nil).GetActivePositions), accountID)
}

// GetByID mocks base method.
func (m *MockPositionsService) GetByID(accountID, ticket int64) (*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", accountID, ticket)
	ret0, _ := ret[0].(*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPositionsServiceMockRecorder) GetByID(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPositionsService)(nil).GetByID), accountID, ticket)
}

// GetTickerBeats mocks base method.
func (m *MockPositionsService) GetTickerBeats(sourceAccountID, destinationAccountID int64, from time.Time) ([]*position.Position, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerBeats", sourceAccountID, destinationAccountID, from)
	ret0, _ := ret[0].([]*position.Position)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickerBeats indicates an expected call of GetTickerBeats.
func (mr *MockPositionsServiceMockRecorder) GetTickerBeats(sourceAccountID, destinationAccountID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerBeats", reflect.TypeOf((*MockPositionsService)(nil).GetTickerBeats), sourceAccountID, destinationAccountID, from)
}

// Insert mocks base method.
func (m *MockPositionsService) Insert(ac *position.Position) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ac)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insert indicates an expected call of Insert.
func (mr *MockPositionsServiceMockRecorder) Insert(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPositionsService)(nil).Insert), ac)
}

// InsertMulti mocks base method.
func (m *MockPositionsService) InsertMulti(accountId int64, ac []*position.Position) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertMulti", accountId, ac)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertMulti indicates an expected call of InsertMulti.
func (mr *MockPositionsServiceMockRecorder) InsertMulti(accountId, ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertMulti", reflect.TypeOf((*MockPositionsService)(nil).InsertMulti), accountId, ac)
}

// Update mocks base method.
func (m *MockPositionsService) Update(ac *position.Position) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPositionsServiceMockRecorder) Update(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPositionsService)(nil).Update), ac)
}
