package accountsrepo

import (
	accounts "github.com/Ruscigno/ticker-signals/internal/transaction/accounts"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountsRepo is an autogenerated mock type for the DealsRepository type
type MockAccountsRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: accountID
func (_m *MockAccountsRepo) Delete(accountID int64) error {
	ret := _m.Called(accountID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(accountID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: accountID
func (_m *MockAccountsRepo) GetByID(accountID int64) (*accounts.Account, error) {
	ret := _m.Called(accountID)

	var r0 *accounts.Account
	if rf, ok := ret.Get(0).(func(int64) *accounts.Account); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accounts.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ac
func (_m *MockAccountsRepo) Insert(ac *accounts.Account) error {
	ret := _m.Called(ac)

	var r0 error
	if rf, ok := ret.Get(0).(func(*accounts.Account) error); ok {
		r0 = rf(ac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ac
func (_m *MockAccountsRepo) Update(ac *accounts.Account) error {
	ret := _m.Called(ac)

	var r0 error
	if rf, ok := ret.Get(0).(func(*accounts.Account) error); ok {
		r0 = rf(ac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
