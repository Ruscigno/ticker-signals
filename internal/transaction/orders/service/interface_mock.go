// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/orders/service/interface.go

// package orderssvc is a generated GoMock package.
package orderssvc

import (
	reflect "reflect"

	orders "github.com/Ruscigno/ticker-signals/internal/transaction/orders"
	gomock "github.com/golang/mock/gomock"
)

// MockOrdersService is a mock of OrdersService interface.
type MockOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersServiceMockRecorder
}

// MockOrdersServiceMockRecorder is the mock recorder for MockOrdersService.
type MockOrdersServiceMockRecorder struct {
	mock *MockOrdersService
}

// NewMockOrdersService creates a new mock instance.
func NewMockOrdersService(ctrl *gomock.Controller) *MockOrdersService {
	mock := &MockOrdersService{ctrl: ctrl}
	mock.recorder = &MockOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersService) EXPECT() *MockOrdersServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrdersService) Delete(accountID, ticket int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", accountID, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrdersServiceMockRecorder) Delete(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrdersService)(nil).Delete), accountID, ticket)
}

// GetByID mocks base method.
func (m *MockOrdersService) GetByID(accountID, ticket int64) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", accountID, ticket)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrdersServiceMockRecorder) GetByID(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrdersService)(nil).GetByID), accountID, ticket)
}

// Insert mocks base method.
func (m *MockOrdersService) Insert(ac *orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrdersServiceMockRecorder) Insert(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrdersService)(nil).Insert), ac)
}

// Update mocks base method.
func (m *MockOrdersService) Update(ac *orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrdersServiceMockRecorder) Update(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrdersService)(nil).Update), ac)
}
