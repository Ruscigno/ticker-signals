// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/orders/repo/interface.go

// package ordersrepo is a generated GoMock package.
package ordersrepo

import (
	reflect "reflect"

	orders "github.com/Ruscigno/ticker-signals/internal/transaction/orders"
	gomock "github.com/golang/mock/gomock"
)

// MockOrdersRepository is a mock of OrdersRepository interface.
type MockOrdersRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersRepositoryMockRecorder
}

// MockOrdersRepositoryMockRecorder is the mock recorder for MockOrdersRepository.
type MockOrdersRepositoryMockRecorder struct {
	mock *MockOrdersRepository
}

// NewMockOrdersRepository creates a new mock instance.
func NewMockOrdersRepository(ctrl *gomock.Controller) *MockOrdersRepository {
	mock := &MockOrdersRepository{ctrl: ctrl}
	mock.recorder = &MockOrdersRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersRepository) EXPECT() *MockOrdersRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockOrdersRepository) Delete(accountID, ticket int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", accountID, ticket)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrdersRepositoryMockRecorder) Delete(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrdersRepository)(nil).Delete), accountID, ticket)
}

// GetByID mocks base method.
func (m *MockOrdersRepository) GetByID(accountID, ticket int64) (*orders.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", accountID, ticket)
	ret0, _ := ret[0].(*orders.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockOrdersRepositoryMockRecorder) GetByID(accountID, ticket interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockOrdersRepository)(nil).GetByID), accountID, ticket)
}

// Insert mocks base method.
func (m *MockOrdersRepository) Insert(ac *orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockOrdersRepositoryMockRecorder) Insert(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockOrdersRepository)(nil).Insert), ac)
}

// Update mocks base method.
func (m *MockOrdersRepository) Update(ac *orders.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOrdersRepositoryMockRecorder) Update(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrdersRepository)(nil).Update), ac)
}
