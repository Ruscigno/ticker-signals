// Copyright 2021 Sander Ruscigno
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by mockery v0.0.0-dev. DO NOT EDIT.
package accountsInforepo

import (
	accountsInfo "github.com/Ruscigno/ticker-signals/internal/transaction/accountsinfo"

	mock "github.com/stretchr/testify/mock"
)

// MockAccountInfoRepo is an autogenerated mock type for the DealsRepository type
type MockAccountInfoRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: infoID
func (_m *MockAccountInfoRepo) Delete(infoID int64) error {
	ret := _m.Called(infoID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(infoID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: infoID
func (_m *MockAccountInfoRepo) GetByID(infoID int64) (*accountsInfo.AccountInfo, error) {
	ret := _m.Called(infoID)

	var r0 *accountsInfo.AccountInfo
	if rf, ok := ret.Get(0).(func(int64) *accountsInfo.AccountInfo); ok {
		r0 = rf(infoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*accountsInfo.AccountInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(infoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ac
func (_m *MockAccountInfoRepo) Insert(ac *accountsInfo.AccountInfo) error {
	ret := _m.Called(ac)

	var r0 error
	if rf, ok := ret.Get(0).(func(*accountsInfo.AccountInfo) error); ok {
		r0 = rf(ac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ac
func (_m *MockAccountInfoRepo) Update(ac *accountsInfo.AccountInfo) error {
	ret := _m.Called(ac)

	var r0 error
	if rf, ok := ret.Get(0).(func(*accountsInfo.AccountInfo) error); ok {
		r0 = rf(ac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
