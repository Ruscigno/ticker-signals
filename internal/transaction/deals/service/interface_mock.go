// Code generated by MockGen. DO NOT EDIT.
// Source: internal/transaction/deals/service/interface.go

// package dealssvc is a generated GoMock package.
package dealssvc

import (
	reflect "reflect"
	time "time"

	deals "github.com/Ruscigno/ticker-signals/internal/transaction/deals"
	gomock "github.com/golang/mock/gomock"
)

// MockDealsService is a mock of DealsService interface.
type MockDealsService struct {
	ctrl     *gomock.Controller
	recorder *MockDealsServiceMockRecorder
}

// MockDealsServiceMockRecorder is the mock recorder for MockDealsService.
type MockDealsServiceMockRecorder struct {
	mock *MockDealsService
}

// NewMockDealsService creates a new mock instance.
func NewMockDealsService(ctrl *gomock.Controller) *MockDealsService {
	mock := &MockDealsService{ctrl: ctrl}
	mock.recorder = &MockDealsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDealsService) EXPECT() *MockDealsServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockDealsService) Delete(accountID, dealID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", accountID, dealID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDealsServiceMockRecorder) Delete(accountID, dealID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDealsService)(nil).Delete), accountID, dealID)
}

// GetByID mocks base method.
func (m *MockDealsService) GetByID(accountID, dealID int64) (*deals.Deal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", accountID, dealID)
	ret0, _ := ret[0].(*deals.Deal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDealsServiceMockRecorder) GetByID(accountID, dealID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDealsService)(nil).GetByID), accountID, dealID)
}

// GetTickerBeats mocks base method.
func (m *MockDealsService) GetTickerBeats(accountID int64, from time.Time) ([]*deals.Deal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerBeats", accountID, from)
	ret0, _ := ret[0].([]*deals.Deal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickerBeats indicates an expected call of GetTickerBeats.
func (mr *MockDealsServiceMockRecorder) GetTickerBeats(accountID, from interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerBeats", reflect.TypeOf((*MockDealsService)(nil).GetTickerBeats), accountID, from)
}

// Insert mocks base method.
func (m *MockDealsService) Insert(ac *deals.Deal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockDealsServiceMockRecorder) Insert(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDealsService)(nil).Insert), ac)
}

// Update mocks base method.
func (m *MockDealsService) Update(ac *deals.Deal) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ac)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDealsServiceMockRecorder) Update(ac interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDealsService)(nil).Update), ac)
}

// UpdateOrderIdByPosition mocks base method.
func (m *MockDealsService) UpdateOrderIdByPosition(accountID, positionID, orderID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderIdByPosition", accountID, positionID, orderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderIdByPosition indicates an expected call of UpdateOrderIdByPosition.
func (mr *MockDealsServiceMockRecorder) UpdateOrderIdByPosition(accountID, positionID, orderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderIdByPosition", reflect.TypeOf((*MockDealsService)(nil).UpdateOrderIdByPosition), accountID, positionID, orderID)
}
