// Code generated by MockGen. DO NOT EDIT.
// Source: internal/tickerbeats/beats/interface.go

// package tickerbeats is a generated GoMock package.
package tickerbeats

import (
	reflect "reflect"
	time "time"

	tickerbeats_v1 "github.com/Ruscigno/ruscigno-gosdk/ticker-beats/v1"
	signal "github.com/Ruscigno/ticker-signals/internal/tickerbeats/signal"
	gomock "github.com/golang/mock/gomock"
)

// MockTickerBeatsService is a mock of TickerBeatsService interface.
type MockTickerBeatsService struct {
	ctrl     *gomock.Controller
	recorder *MockTickerBeatsServiceMockRecorder
}

// MockTickerBeatsServiceMockRecorder is the mock recorder for MockTickerBeatsService.
type MockTickerBeatsServiceMockRecorder struct {
	mock *MockTickerBeatsService
}

// NewMockTickerBeatsService creates a new mock instance.
func NewMockTickerBeatsService(ctrl *gomock.Controller) *MockTickerBeatsService {
	mock := &MockTickerBeatsService{ctrl: ctrl}
	mock.recorder = &MockTickerBeatsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTickerBeatsService) EXPECT() *MockTickerBeatsServiceMockRecorder {
	return m.recorder
}

// BeatsSent mocks base method.
func (m *MockTickerBeatsService) BeatsSent(beats []*TickerBeats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeatsSent", beats)
	ret0, _ := ret[0].(error)
	return ret0
}

// BeatsSent indicates an expected call of BeatsSent.
func (mr *MockTickerBeatsServiceMockRecorder) BeatsSent(beats interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeatsSent", reflect.TypeOf((*MockTickerBeatsService)(nil).BeatsSent), beats)
}

// ConfirmByExternalID mocks base method.
func (m *MockTickerBeatsService) ConfirmByExternalID(destinationAccountID, externalid, tickerBeatsID, positionID int64, status signal.SignalStatusEnum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmByExternalID", destinationAccountID, externalid, tickerBeatsID, positionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmByExternalID indicates an expected call of ConfirmByExternalID.
func (mr *MockTickerBeatsServiceMockRecorder) ConfirmByExternalID(destinationAccountID, externalid, tickerBeatsID, positionID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmByExternalID", reflect.TypeOf((*MockTickerBeatsService)(nil).ConfirmByExternalID), destinationAccountID, externalid, tickerBeatsID, positionID, status)
}

// GetTickerBeats mocks base method.
func (m *MockTickerBeatsService) GetTickerBeats(accountID int64, from time.Time, sType tickerbeats_v1.SignalType, lastOrderID int64) ([]*TickerBeats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerBeats", accountID, from, sType, lastOrderID)
	ret0, _ := ret[0].([]*TickerBeats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTickerBeats indicates an expected call of GetTickerBeats.
func (mr *MockTickerBeatsServiceMockRecorder) GetTickerBeats(accountID, from, sType, lastOrderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerBeats", reflect.TypeOf((*MockTickerBeatsService)(nil).GetTickerBeats), accountID, from, sType, lastOrderID)
}
