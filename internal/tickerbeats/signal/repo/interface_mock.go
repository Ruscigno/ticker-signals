// Code generated by MockGen. DO NOT EDIT.
// Source: internal/tickerbeats/signal/repo/interface.go

// package signalrepo is a generated GoMock package.
package signalrepo

import (
	reflect "reflect"

	tickerbeats_v1 "github.com/Ruscigno/ruscigno-gosdk/ticker-beats/v1"
	signal "github.com/Ruscigno/ticker-signals/internal/tickerbeats/signal"
	tradetransaction "github.com/Ruscigno/ticker-signals/internal/transaction/tradetransaction"
	gomock "github.com/golang/mock/gomock"
)

// MockSignalRepository is a mock of SignalRepository interface.
type MockSignalRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSignalRepositoryMockRecorder
}

// MockSignalRepositoryMockRecorder is the mock recorder for MockSignalRepository.
type MockSignalRepositoryMockRecorder struct {
	mock *MockSignalRepository
}

// NewMockSignalRepository creates a new mock instance.
func NewMockSignalRepository(ctrl *gomock.Controller) *MockSignalRepository {
	mock := &MockSignalRepository{ctrl: ctrl}
	mock.recorder = &MockSignalRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignalRepository) EXPECT() *MockSignalRepositoryMockRecorder {
	return m.recorder
}

// CloseDeadPositions mocks base method.
func (m *MockSignalRepository) CloseDeadPositions(sourceAccountID, destinationAccountID int64, groupID string, minToExpire int32) ([]*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseDeadPositions", sourceAccountID, destinationAccountID, groupID, minToExpire)
	ret0, _ := ret[0].([]*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseDeadPositions indicates an expected call of CloseDeadPositions.
func (mr *MockSignalRepositoryMockRecorder) CloseDeadPositions(sourceAccountID, destinationAccountID, groupID, minToExpire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseDeadPositions", reflect.TypeOf((*MockSignalRepository)(nil).CloseDeadPositions), sourceAccountID, destinationAccountID, groupID, minToExpire)
}

// ConfirmByExternalID mocks base method.
func (m *MockSignalRepository) ConfirmByExternalID(destinationAccountID, externalID, tickerBeatsID, positionID int64, status signal.SignalStatusEnum) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfirmByExternalID", destinationAccountID, externalID, tickerBeatsID, positionID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfirmByExternalID indicates an expected call of ConfirmByExternalID.
func (mr *MockSignalRepositoryMockRecorder) ConfirmByExternalID(destinationAccountID, externalID, tickerBeatsID, positionID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfirmByExternalID", reflect.TypeOf((*MockSignalRepository)(nil).ConfirmByExternalID), destinationAccountID, externalID, tickerBeatsID, positionID, status)
}

// CreateTickerBeats mocks base method.
func (m *MockSignalRepository) CreateTickerBeats(sourceAccountID, destinationAccountID int64, groupID string, minToExpire int32) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTickerBeats", sourceAccountID, destinationAccountID, groupID, minToExpire)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTickerBeats indicates an expected call of CreateTickerBeats.
func (mr *MockSignalRepositoryMockRecorder) CreateTickerBeats(sourceAccountID, destinationAccountID, groupID, minToExpire interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTickerBeats", reflect.TypeOf((*MockSignalRepository)(nil).CreateTickerBeats), sourceAccountID, destinationAccountID, groupID, minToExpire)
}

// GetByGroupID mocks base method.
func (m *MockSignalRepository) GetByGroupID(destinationAccountID int64, groupID string, entry tickerbeats_v1.DealEntry, stype tickerbeats_v1.SignalType) ([]*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByGroupID", destinationAccountID, groupID, entry, stype)
	ret0, _ := ret[0].([]*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByGroupID indicates an expected call of GetByGroupID.
func (mr *MockSignalRepositoryMockRecorder) GetByGroupID(destinationAccountID, groupID, entry, stype interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByGroupID", reflect.TypeOf((*MockSignalRepository)(nil).GetByGroupID), destinationAccountID, groupID, entry, stype)
}

// GetSignalByDestination mocks base method.
func (m *MockSignalRepository) GetSignalByDestination(accountID int64) ([]*signal.Signal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSignalByDestination", accountID)
	ret0, _ := ret[0].([]*signal.Signal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSignalByDestination indicates an expected call of GetSignalByDestination.
func (mr *MockSignalRepositoryMockRecorder) GetSignalByDestination(accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSignalByDestination", reflect.TypeOf((*MockSignalRepository)(nil).GetSignalByDestination), accountID)
}

// GetTradeRequesByGroupID mocks base method.
func (m *MockSignalRepository) GetTradeRequesByGroupID(destinationAccountID int64, groupID string, entry tickerbeats_v1.DealEntry) ([]*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTradeRequesByGroupID", destinationAccountID, groupID, entry)
	ret0, _ := ret[0].([]*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTradeRequesByGroupID indicates an expected call of GetTradeRequesByGroupID.
func (mr *MockSignalRepositoryMockRecorder) GetTradeRequesByGroupID(destinationAccountID, groupID, entry interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTradeRequesByGroupID", reflect.TypeOf((*MockSignalRepository)(nil).GetTradeRequesByGroupID), destinationAccountID, groupID, entry)
}

// NeedToCloseAllPositions mocks base method.
func (m *MockSignalRepository) NeedToCloseAllPositions(accountID int64, groupID string, stop int32) ([]*tradetransaction.TradeRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedToCloseAllPositions", accountID, groupID, stop)
	ret0, _ := ret[0].([]*tradetransaction.TradeRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NeedToCloseAllPositions indicates an expected call of NeedToCloseAllPositions.
func (mr *MockSignalRepositoryMockRecorder) NeedToCloseAllPositions(accountID, groupID, stop interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedToCloseAllPositions", reflect.TypeOf((*MockSignalRepository)(nil).NeedToCloseAllPositions), accountID, groupID, stop)
}

// RemoveDuplicatedSignals mocks base method.
func (m *MockSignalRepository) RemoveDuplicatedSignals(destinationAccountID int64, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDuplicatedSignals", destinationAccountID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDuplicatedSignals indicates an expected call of RemoveDuplicatedSignals.
func (mr *MockSignalRepositoryMockRecorder) RemoveDuplicatedSignals(destinationAccountID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDuplicatedSignals", reflect.TypeOf((*MockSignalRepository)(nil).RemoveDuplicatedSignals), destinationAccountID, groupID)
}

// UpdatePositionIdBeforeClose mocks base method.
func (m *MockSignalRepository) UpdatePositionIdBeforeClose(sourceAccountID, destinationAccountID int64, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePositionIdBeforeClose", sourceAccountID, destinationAccountID, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePositionIdBeforeClose indicates an expected call of UpdatePositionIdBeforeClose.
func (mr *MockSignalRepositoryMockRecorder) UpdatePositionIdBeforeClose(sourceAccountID, destinationAccountID, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePositionIdBeforeClose", reflect.TypeOf((*MockSignalRepository)(nil).UpdatePositionIdBeforeClose), sourceAccountID, destinationAccountID, groupID)
}

// UpdateStatus mocks base method.
func (m *MockSignalRepository) UpdateStatus(sourceAccountID, destinationAccountID int64, status signal.SignalStatusEnum, groupID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", sourceAccountID, destinationAccountID, status, groupID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockSignalRepositoryMockRecorder) UpdateStatus(sourceAccountID, destinationAccountID, status, groupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockSignalRepository)(nil).UpdateStatus), sourceAccountID, destinationAccountID, status, groupID)
}
